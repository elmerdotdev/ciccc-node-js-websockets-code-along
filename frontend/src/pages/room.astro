---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<div class="container">
			<h1>Our Chat App</h1>

      <button class="btn-room" data-room="Room 1">Room 1</button>
      <button class="btn-room" data-room="Room 2">Room 2</button>
      <button class="btn-room" data-room="Room 3">Room 3</button>

			<form class="message-form" action="">
				<input type="text" id="usernameInput" required placeholder="Enter your username">
				<input type="text" id="messageInput" required placeholder="Enter your message">
				<button type="submit">Send message</button>
			</form>

			<h2>Messages</h2>
			<ul class="messages"></ul>
		</div>

		<script type="module">
			import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";

			const socket = io('http://localhost:3000') // Socket backend url

      const roomButtons = document.querySelectorAll('.btn-room')
      const messages = document.querySelector('.messages')
      const messageForm = document.querySelector('.message-form')
      const usernameInput = document.querySelector('#usernameInput')
      const messageInput = document.querySelector('#messageInput')

      let currentRoom = '' // No default room

      // Handle room buttons
      roomButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const newRoom = btn.getAttribute('data-room')
          const username = usernameInput.value.trim() || 'Anonymous'

          if (currentRoom) {
            // Leave the current room
            socket.emit('leave room', { room: currentRoom, username})
          }

          // Join new room
          currentRoom = newRoom
          socket.emit('join room', { room: currentRoom, username })

          // Clear the messages ul
          messages.innerHTML = ''
        })
      })

      // Send message to server
      messageForm.addEventListener('submit', (e) => {
        e.preventDefault()
        const username = usernameInput.value.trim()
        const message = messageInput.value.trim()
        if (currentRoom && message) {
          socket.emit('message', {
            username,
            text: message,
            room: currentRoom
          })
          messageInput.value = ''
        }
      })

      // Listen for new messages from server
      socket.on('message', (data) => {
        if (data.room === currentRoom || !data.room) {
          const li = document.createElement('li')
          li.innerHTML = `<strong>${data.username}:</strong> ${data.text}`
          messages.appendChild(li)
        }
      })
		</script>
	</body>
</html>
